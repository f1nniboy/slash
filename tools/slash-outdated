#!/bin/sh
# Check a repository for outdated packages.

repology_version() {
	# Grab the package's version as known by repology.org by downloading the
	# svg latest-version badge and extracting the version from the xml.
	repology_name "$1"

	r=$(curl -Ss "https://repology.org/badge/latest-versions/${remote}.svg") && {
		remote_ver=${r%</text>*}
		remote_ver=${remote_ver##*>}
	}

	case ${remote} in
		# Temporary workaround.
		freetype-harfbuzz)
			[ "${remote_ver}" = "2.10.4+2.9.0" ] && remote_ver="2.11.0+2.9.0"
		;;

		# Temporary workaround.
		nodejs)
			[ "${remote_ver}" = "16.9.0" ] && remote_ver="16.8.0"
		;;
	esac
}

repology_name() {
	# Fix any known naming inconsistences between packages and Repology.
	remote=$(
		# Strip unrelated suffixes.
		remote=${1%%-bin}
		remote=${remote%%-git}

		printf "%s" "${remote}" |

		# Remote names are all lowercase.
		tr '[:upper:]' '[:lower:]' |

		# Remote always uses -.
		tr _ -
    )

	case ${remote} in
		baseinit|baselayout|slash)
			remote=-
		;;

		# We are using BSD m4 and there is no Repology package for it.
		m4)
			remote=-
		;;

		# Remote version uses a fork which we don't use.
		opendoas)
			remote=-
		;;

		font-awesome-ttf)
			remote=fonts:fontawesome
		;;

		gtk+3)
			remote=gtk3+classic
		;;

		hack)
			remote=fonts:hack
		;;

		libelf)
			remote=elfutils
		;;

		linux-headers)
			remote=linux
		;;

		man-pages)
			remote=manpages
		;;

		terminus-font)
			remote=fonts:terminus
		;;

		make)
			remote=bmake
		;;
	esac
}

main() {
	echo "Checking repository '$1' for outdated packages..."

	for pkg in */; do
		pkg="${pkg%%/}"

		read -r ver _ 2> /dev/null < "${pkg}/version" || {
			echo "${pkg}: version not found"
			continue
		}

		[ "${ver}" = git ] &&
			continue

		repology_version "${pkg}" || {
			echo "${pkg}: network error"
			continue
		}

		case ${remote_ver} in
			*", ${ver}"* | *"${ver},"* | "${ver}")
				# Package up-to-date, do nothing.
			;;

			'' | ' ')
				echo "${pkg}: empty response"
			;;

			'-')
				# No version scheme, do nothing.
			;;

			*)
				echo "${pkg}: ${ver} => ${remote_ver}"
			;;
		esac
	done
}

for repo do
	[ "${repo}" ] || {
		echo "Usage: $0 [path to repository]"
		exit 1
	}

	cd "${repo}" 2> /dev/null || {
		echo "The repository '${repo}' is inaccessible."
		exit 1
	}

	main "${repo}"
done
